{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _templateObject4,\n    _templateObject5,\n    _templateObject6,\n    _templateObject7,\n    _jsxFileName = \"/workspace/Estudos-react-native/src/pages/Gerador/Index.jsx\";\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components/native';\nimport Slider from '@react-native-community/slider';\nimport Clipboard from 'expo-clipboard';\nvar Container = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  background-color: #f3f3ff;\\n  flex: 1;\\n  align-items: center;\\n  justify-content: center;\\n\"])));\nvar Logo = styled.Image(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  margin-bottom: 50px;\\n\"])));\nvar Title = styled.Text(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n  font-size: 35px;\\n  font-weight: bold;\\n\"])));\nvar TextArea = styled.View(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n  width: 90%;\\n  margin: 15px 0;\\n  padding: 15px 0;\\n  background-color: #fff;\\n  border-radius: 8px;\\n\"])));\nvar Button = styled.TouchableOpacity(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose([\"\\n  width: 90%;\\n  height: 50px;\\n  justify-content: center;\\n  align-items: center;\\n  background-color: #ffa200;\\n  border-radius: 8px;\\n  margin-bottom: 40px;\\n\"])));\nvar ButtonText = styled(Title)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose([\"\\n  font-size: 20px;\\n  color: #fff;\\n\"])));\nvar Password = styled(ButtonText)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose([\"\\n  color: #000;\\n  align-self: center;\\n\"])));\nvar charset = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789';\nexport default function Gerador() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(5),\n      _useState4 = _slicedToArray(_useState3, 2),\n      size = _useState4[0],\n      setSize = _useState4[1];\n\n  function generatePass() {\n    var pass = '';\n\n    for (var i = 0, n = charset.length; i < size; i++) {\n      pass += charset.charAt(Math.floor(Math.random() * n));\n    }\n\n    setPassword(pass);\n  }\n\n  function copyPass() {\n    Clipboard.setString(password);\n    alert('Senha copiada com sucesso!');\n  }\n\n  return React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, React.createElement(Logo, {\n    source: require(\"./images/logo.png\"),\n    resizeMode: \"cover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, Math.floor(size), \" Caracteres\"), React.createElement(TextArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, React.createElement(Slider, {\n    minimumValue: 5,\n    maximumValue: 15,\n    minimumTrackTintColor: \"#ff0000\",\n    maximumTrackTintColor: \"#000\",\n    value: size,\n    onValueChange: function onValueChange(valor) {\n      return setSize(valor.toFixed(0));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })), React.createElement(Button, {\n    onPress: generatePass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, React.createElement(ButtonText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Gerar senha\")), password && React.createElement(TextArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, React.createElement(Password, {\n    onLongPress: copyPass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, password)));\n}","map":{"version":3,"sources":["/workspace/Estudos-react-native/src/pages/Gerador/Index.jsx"],"names":["React","useState","styled","Slider","Clipboard","Container","View","Logo","Image","Title","Text","TextArea","Button","TouchableOpacity","ButtonText","Password","charset","Gerador","password","setPassword","size","setSize","generatePass","pass","i","n","length","charAt","Math","floor","random","copyPass","setString","alert","require","valor","toFixed"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components/native'\n\nimport Slider from '@react-native-community/slider'\nimport Clipboard from 'expo-clipboard'\n\nconst Container = styled.View`\n  background-color: #f3f3ff;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Logo = styled.Image`\n  margin-bottom: 50px;\n`\n\nconst Title = styled.Text`\n  font-size: 35px;\n  font-weight: bold;\n`\n\nconst TextArea = styled.View`\n  width: 90%;\n  margin: 15px 0;\n  padding: 15px 0;\n  background-color: #fff;\n  border-radius: 8px;\n`\n\nconst Button = styled.TouchableOpacity`\n  width: 90%;\n  height: 50px;\n  justify-content: center;\n  align-items: center;\n  background-color: #ffa200;\n  border-radius: 8px;\n  margin-bottom: 40px;\n`\n\nconst ButtonText = styled(Title)`\n  font-size: 20px;\n  color: #fff;\n`\n\nconst Password = styled(ButtonText)`\n  color: #000;\n  align-self: center;\n`\n\nlet charset = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789'\n\nexport default function Gerador() {\n\n  const [password, setPassword] = useState()\n  const [size, setSize] = useState(5)\n\n  function generatePass() {\n    let pass = ''\n    for (let i = 0, n = charset.length; i < size; i++) {\n      pass += charset.charAt(Math.floor(Math.random() * n))\n    }\n    setPassword(pass)\n  }\n  function copyPass() {\n    Clipboard.setString(password)\n    alert('Senha copiada com sucesso!')\n  }\n\n  return (\n    <Container>\n      <Logo\n        source={require('./images/logo.png')}\n        resizeMode=\"cover\"\n      />\n      <Title>{Math.floor(size)} Caracteres</Title>\n      <TextArea>\n        <Slider\n          minimumValue={5}\n          maximumValue={15}\n          minimumTrackTintColor=\"#ff0000\"\n          maximumTrackTintColor=\"#000\"\n          value={size}\n          onValueChange={(valor) => setSize(valor.toFixed(0))}\n        />\n      </TextArea>\n      <Button onPress={generatePass}>\n        <ButtonText>Gerar senha</ButtonText>\n      </Button>\n      {password && (\n        <TextArea >\n          <Password onLongPress={copyPass} >{password}</Password>\n        </TextArea>\n      )}\n\n    </Container>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}